package com.wanhive.rts.handler;

import in.co.itracksolution.SampleInsert;
import in.co.itracksolution.model.LastData;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.RandomAccessFile;
//import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.StringTokenizer;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.Date;

import com.wanhive.rts.FileWriteHandler;
import com.wanhive.rts.ProtocolHandler;
import com.wanhive.rts.ServerDataEvent;
import com.wanhive.rts.TransactionServer;
//import com.wanhive.rts.handler.db.DataManager;
import com.wanhive.rts.alert_module;


public class RequestHandler {
	
	public void handleProtocol(ServerDataEvent dataEvent) {
		//Clean up the message and set up request Parameters
		dataEvent.message=dataEvent.message.replaceAll("(\\r|\\n)", "");
		//dataEvent.requestParams=dataEvent.message.split(":");
		//String[] commandStr=dataEvent.requestParams;
		
		//System.out.println(dataEvent.message);
		//System.out.println("d");
		UpdateDatabase(dataEvent.message);
	}
	
	private void UpdateDatabase(String Response) {
		
		GregorianCalendar calendar = new GregorianCalendar();
		//Statement statement;
		//ResultSet result;
		//result=null;
		//statement=null;
		//ResultSetMetaData rsmd;
		StringTokenizer st,st4;
		SimpleDateFormat formatter;
		Date date,date1;

		String line="",serverdatetime="",devicedatetime="";
		int NoofToken,i=0,j=0,k=0;
		int GPSYear,GPSMonth,GPSDay,GPSHr,GPSMin,GPSSec;
		double Latitudetmp=0.0,Longitudetmp=0.0;
		String marker_a1="",marker_a2="";
		String folderDate="",RFID="";
//		int SerialNo = 0;
		String[] data = new String[35];
		System.out.println("RESP:"+Response);
		st = new StringTokenizer(Response,";");		//Parsing Input
		NoofToken = st.countTokens();
		//System.out.println("No of Token="+NoofToken);

//		String ServerTS = ""; 
		String DateTime = "";
//		String VehicleID = "";
		String DeviceIMEINo = "";
		String MsgType = "";
		String Version = "";
		String Fix = "";
//		String SendMode = "";
		String Latitude = "";
		String Longitude = "";
		String Altitude = "";
		String Speed = "";		
		String Signal_Strength = "";
		String No_Of_Satellites = "";
//		String CBC = "";
		String CellName = "";
//		String min_speed = "";
//		String max_speed = "";
		String distance = "";
		String strOrig = "";

		String io_value1 = "";
		String io_value2 = "";
		String io_value3 = "";
		String io_value4 = "";
		String io_value5 = "";
		String io_value6 = "";
		String io_value7 = "";
		String io_value8 = "";
		
		String SupplyVoltage = "";
		//int SpeedAlert = 0;
		//int GeofenceInAlert = 0;
		//int GeofenceOutAlert =0;
		//int StopAlert =0;
		//int MoveAlert =0;
		//int LowVoltageAlert =0;
		float speed_f = 0.F;
		float supv_f = 0.F;
		double ln_io_value1 = 0;
		double ln_io_value2 = 0;
		double ln_io_value3 = 0;
		double ln_io_value4 = 0;
		double ln_io_value5 = 0;
		double ln_io_value6 = 0;
		double ln_io_value7 = 0;
		double ln_io_value8 = 0;
		//String ax = "",	ay = "", az = "", mx = "",	my = "", mz = "", bx = "",	by = "", bz = "";
		
		String exception_message ="";
		//String ax = "",	ay = "", az = "", mx = "",	my = "", mz = "", bx = "",	by = "", bz = "";				
//		String LogDataPath = "D:\\itrack_vts/xml_data";
//		String RealDataPath = "D:\\itrack_vts/last_location";
		
		try
		{
			if(NoofToken > 0)
			{				
				//System.out.println("NoOfTokens="+NoofToken);

				for(k=0;k<NoofToken ;k++)
				{
					//System.out.println("k="+k);
					line = st.nextToken();
					//System.out.println(line);
					//st1 = new StringTokenizer(line,":");		//Parsing Input
					//NoofField = st1.countTokens();
					//System.out.println("No of Fields="+NoofField);
						
					//if(NoofField > 4)
					{
						date = new Date();
						/*Calendar cal = Calendar.getInstance(); // creates calendar
						cal.setTime(new Date()); // sets calendar time/date
						cal.add(Calendar.HOUR_OF_DAY, 1); // adds one hour
						date=(Date) cal.getTime();*/
						
						formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						serverdatetime = formatter.format(date);
						//System.out.println("STS="+serverdatetime);
						//System.out.println("line_len="+line.length());

						try{
							for(i=0;i<line.length();i++)
							{
								if(i==0)
								{
									//System.out.println("One");
									if(line.charAt(i) != '#')
									break;
									data[0]="";
								}
								else if(line.charAt(i) == ':')
								{
									//System.out.println(data[j]);
									j++;
									data[j]="";
								}
								else
								{
									//System.out.println("Two:else");
									if(data[j] == null)
									{
										data[j] = line.charAt(i)+"";
									}
									else
									{
										data[j] = data[j]+line.charAt(i);
									}
								}								
							}
						}catch(Exception e){
							//System.out.println("exception1:"+e.getMessage());
							e.printStackTrace();
							exception_message+="\nOne::"+e.getMessage();
						}
						j=0;

						boolean valid_imei =false;
						//System.out.println("data[0]==="+data[0]+" ,data[1]="+data[1]);
			 			try{
			 				valid_imei = check_valid_imei(data[1]);
			 			}catch(Exception e){
			 				exception_message+="\nTwo::"+e.getMessage();
			 				System.out.println(e.getMessage());}
			 			//System.out.println("validImei="+valid_imei);
						
						if( (valid_imei) && ((data[0].equals("NORMAL")) || (data[0].equals("PWRSV")) || (data[0].equals("LOD")) || (data[0].equals("ALERT")) || (data[0].equals("LOD")) || (data[0].equals("GPS")) || (data[0].equals("PDU")) || (data[0].equals("GPS-HALT")) || (data[0].equals("GPS-START"))) )
						{
							if((data[8].equals("")==false) && (data[8].equals("-")==false) && (data[9].equals("")==false) && (data[9].equals("-")==false))
							{
								GPSYear = Integer.parseInt("20"+data[8].substring(4));
								GPSMonth = Integer.parseInt(data[8].substring(2,4));
								GPSDay = Integer.parseInt(data[8].substring(0,2));
								GPSHr = Integer.parseInt(data[9].substring(0,2));
								GPSMin = Integer.parseInt(data[9].substring(2,4));
								GPSSec = Integer.parseInt(data[9].substring(4,6));
								//System.out.println(GPSYear+" "+GPSMonth+" "+GPSDay+" "+GPSHr+" "+GPSMin+" "+GPSSec);

								calendar = new GregorianCalendar(GPSYear,(GPSMonth-1),GPSDay,GPSHr,GPSMin,GPSSec);
								date1 = new Date(calendar.getTimeInMillis()+19800000);
								devicedatetime = formatter.format(date1);
								//System.out.println("\nDeviceTime="+devicedatetime);
							}
							else
							{
								devicedatetime = "0000-00-00 00:00:00";
							}
							
							int d2_len = data[4].length();		//lat
							int d3_len = data[5].length();		//long
													
							
							//System.out.println("d2_len="+d2_len+" d3_len="+d3_len);
							
							if( (d2_len ==11 && d3_len ==12) && ( (data[4].equals("")==false) && (data[4].equals("-")==false) && (data[5].equals("")==false) && (data[5].equals("-")==false) && (devicedatetime.equals("0000-00-00 00:00:00")==false) ) )
							{
								Latitudetmp = (Double.parseDouble(data[4].substring(0,2))+Double.parseDouble(data[4].substring(2,9))/60);
								Longitudetmp = (Double.parseDouble(data[5].substring(0,3))+Double.parseDouble(data[5].substring(3,10))/60);
								
								//System.out.println("Latitudetmp="+Latitudetmp+" Longitudetmp="+Longitudetmp);								
								Latitudetmp *= 100000;
								Longitudetmp *= 100000;
								Latitudetmp = Math.round(Latitudetmp);
								Longitudetmp = Math.round(Longitudetmp);
								Latitudetmp = Latitudetmp/100000;
								Longitudetmp = Longitudetmp/100000;
								Latitude =  ""+Latitudetmp+data[4].charAt(10);
								Longitude =  ""+Longitudetmp+data[5].charAt(11);
								
								//Latitude =  ""+Latitudetmp+lat_d1;
								//Longitude =  ""+Longitudetmp+lng_d1;								
								//System.out.println("\nLatitude: "+Latitude+" Longitude: "+Longitude);	
							}
							
							//System.out.println("Test1");
							//////////////////// MAPPING VARIABALES ///////////////													
							MsgType = data[0];
							DeviceIMEINo = data[1];
							Version = data[2];							
							Fix = data[3];
							//Latitude = Data[4];	//Manipulated above
							//Longitude = Data[5];	//Manipulated above
							Altitude = data[6];
							Speed = data[7].trim();
							//########### NAUTICAL MILES TO KM
							float tmp_speed = Float.parseFloat(Speed);
							tmp_speed = tmp_speed * 1.852f;
							Speed = Float.toString(tmp_speed);
							//#################################
							
							//System.out.println("MsgType="+MsgType+", DeviceIMEINo="+DeviceIMEINo+" ,Version="+Version+" ,Fix="+Fix);
							////////////////////// FOR DATA[7] (SPEED) //////////////////
							strOrig = Speed;   
							char[] stringArray1;
							   
							//convert string into array using toCharArray() method of string class    
							stringArray1 = strOrig.toCharArray();
							   
							//display the array    
							for(int index=0; index < stringArray1.length; index++)   
							{
							  if( (stringArray1[index]=='0' || stringArray1[index]=='1'  || stringArray1[index]=='2'  || stringArray1[index]=='3' || stringArray1[index]=='4' || stringArray1[index]=='5' || stringArray1[index]=='6' || stringArray1[index]=='7' || stringArray1[index]=='8' || stringArray1[index]=='9') )
							  {
								//System.out.print(stringArray[index]);
							  }  
							  else
							  {
								stringArray1[index] = '.';
							  }    
							  //System.out.print(stringArray[index]);
							}							
							try{
								Speed = new String(stringArray1);
								speed_f = Float.parseFloat(Speed);
								speed_f = (float) (Math.round(speed_f*100.0)/100.0);
							}catch(Exception e) { 
								exception_message+="\nThree::"+e.getMessage();
								//System.out.println("Speed error");
								}	
							//////////////////////// DATA[7] SPEED CLOSED////////////////			
							//System.out.println("Test3");			
							DateTime = devicedatetime;		//data[8] +" "+ data[9]	 //Manipulated above
							//System.out.println("DeviceDateTime="+DateTime);
							No_Of_Satellites = data[10];
							CellName = data[11];
							CellName = CellName.replace("\"", "");
							CellName = CellName.replace(",", "#");

							distance = data[12];

							try
							{
								//System.out.println("dist before="+distance);
								float dist = Float.valueOf(data[12].trim()).floatValue();
								dist = dist / 1000f;
								distance = String.valueOf(dist);
							}
							catch(Exception Distance)
							{
								distance="0.0";
								exception_message+="\nFour::"+Distance.getMessage();
								//System.out.println("Error Distance="+Distance);
							}

							//System.out.println("Test4");
							//System.out.println("dist after="+distance);
							//distance = data[12];
							
							///////////IO values
							// data[13] to data[20]
							io_value1 = data[13];
							io_value2 = data[14];
							io_value3 = data[15];
							io_value4 = data[16];
							io_value5 = data[17];
							io_value6 = data[18];
							io_value7 = data[19];
							io_value8 = data[20];
																												
							///////////////////////
							Signal_Strength = data[21];
							SupplyVoltage = data[22].trim();
							//System.out.println("Test5");
							/*ax = data[23];
							ay = data[24];
							az = data[25];

							mx = data[26];
							my = data[27];
							mz = data[28];
							
							bx = data[29];
							by = data[30];
							bz = data[31];*/
							
							//System.out.println("ax="+ax+", bx="+bx+" ,mx="+mx);
							////////////////////// FOR DATA[22] (SupplyVoltage) //////////////////
							strOrig = SupplyVoltage;   
							char[] stringArray2;
							   
							//convert string into array using toCharArray() method of string class    
							stringArray2 = strOrig.toCharArray();
							   
							//display the array    
							for(int index=0; index < stringArray2.length; index++)   
							{
							  if( (stringArray2[index]=='0' || stringArray2[index]=='1'  || stringArray2[index]=='2'  || stringArray2[index]=='3' || stringArray2[index]=='4' || stringArray2[index]=='5' || stringArray2[index]=='6' || stringArray2[index]=='7' || stringArray2[index]=='8' || stringArray2[index]=='9') )
							  {
								//System.out.print(stringArray[index]);
							  }  
							  else
							  {
								stringArray2[index] = '.';
							  }    
							  //System.out.print(stringArray[index]);
							}							
							SupplyVoltage = new String(stringArray2);
							
							try{
								supv_f = Float.parseFloat(SupplyVoltage);
								supv_f = (float) (Math.round(supv_f*100.0)/100.0);
							}catch(Exception e1) {
								exception_message+="\nFive::"+e1.getMessage();
								//System.out.println("Exception SupV");
								}

							st4 = new StringTokenizer(serverdatetime," ");
							folderDate = st4.nextToken();
							//System.out.println("FolderDate="+folderDate);

							String vserial = DeviceIMEINo;
							String fuel="-";					
							String q="\"";												

							 try{									
									 q = ";";
									 //######### INSERT FULL DATA INTO CASSANDRA DATABASE
									 //marker_a2 = MsgType+q+Version+q+Fix+q+Latitude+q+Longitude+q+speed_f+q+serverdatetime+q+DateTime+q+io_value1+q+io_value2+q+io_value3+q+io_value4+q+io_value5+q+io_value6+q+io_value7+q+io_value8+q+Signal_Strength+q+supv_f+q+CellName+q;	//with cellname
									 //marker_a2 = MsgType+q+Version+q+Fix+q+Latitude+q+Longitude+q+speed_f+q+serverdatetime+q+DateTime+q+io_value1+q+io_value2+q+io_value3+q+io_value4+q+io_value5+q+io_value6+q+io_value7+q+io_value8+q+Signal_Strength+q+supv_f+q; 				//without cellname									
									 //String DateTime2 = DateTime.replace(' ', '@');
									 marker_a2 = MsgType+q+Version+q+Fix+q+Latitude+q+Longitude+q+speed_f+q+io_value1+q+io_value2+q+io_value3+q+io_value4+q+io_value5+q+io_value6+q+io_value7+q+io_value8+q+Signal_Strength+q+supv_f+q; 		//without cellname
									 System.out.println("marker_a2:"+marker_a2);
									 TransactionServer.push_cassandra.insertFulldata(DeviceIMEINo,DateTime,marker_a2);										
									//st_cassandra.close();	
									//########################################
								//}
				
								//raf1.close();
							}catch(Exception ex){
								//System.out.println("Exception 700");
								exception_message+="\nSix::"+ex.getMessage(); 								
								try{
								//raf1.close();
								//out_a1.close();
								}catch(Exception ex1){
									exception_message+="\nSeven::"+ex1.getMessage(); 	
									//System.out.println("Exception 800");
								}

								ex.printStackTrace();
							 }
								
							try{	
								//CALL WRITE LAST LOCATION															
								//String filename = RealDataPath+"/"+vserial+".xml";
								Speed = Float.toString(speed_f);
								SupplyVoltage = Float.toString(supv_f);
								write_last_location(MsgType,vserial,Version,Fix,Latitude,Longitude,Speed,serverdatetime,DateTime,io_value1,io_value2,io_value3,io_value4,io_value5,io_value6,io_value7,io_value8,Signal_Strength,SupplyVoltage,CellName);
								
								//###### CALL SMS ALERT FUNCTION
								//System.out.println("BEFORE FINAL ALERT="+vserial+","+DateTime+","+serverdatetime+","+Latitude+","+Longitude+","+Speed+","+io_value1+","+io_value2+","+io_value3+","+io_value4+","+io_value5+","+io_value6+","+io_value7+","+io_value8+","+SupplyVoltage);
								//alert_module.write_final_alert_data(vserial, DateTime, serverdatetime, Latitude, Longitude, Speed, io_value1, io_value2, io_value3, io_value4, io_value5, io_value6, io_value7, io_value8, SupplyVoltage);
								
								// LAST LOCATION CLOSED									
							}catch(Exception ex5){
								exception_message+="\nEight::"+ex5.getMessage();
								//System.out.println("Exception IN LAST LOCATION WRITE:"+ex5.getMessage()); 
							}							
							
							/////////// CALL -WRITE PORT LOG /////////////////																
							/*try{
								//System.out.println("PV IEMI="+pv.imei);								
								//String port_logfolder = "/mnt/volume1/xml_vts/imei_port/"+folderDate;
								//String port_no = "10020";
								//System.out.println("PORT="+TransactionServer.port_number);
								String port_logfolder = "/home/VTS/GPRSLoggerLocal/port_log/"+folderDate;
								String port_flag_path = "/home/VTS/GPRSLoggerLocal/port_flag/"+TransactionServer.port_number;

								//String port_logfolder = "D:\\test_app/port_log/"+folderDate;
								//String port_flag_path = "D:\\test_app/port_flag/"+port_no;
								
								File f = new File(port_flag_path);
								if(f.exists())
								{
									write_port_log(vserial, port_logfolder, serverdatetime, DateTime, TransactionServer.port_number);
								}
							}catch(Exception ex6){ 
								exception_message+="\nNine::"+ex6.getMessage();
								System.out.println("Exception IN PORT WRITE:"+ex6.getMessage()); }	*/						
							////////////////////////////////////////////////																			
						 }
						else
						{
							exception_message+="\nTen::Invalid Data";
						}
					}
				}
			}
		}
		catch (Exception e)	
		{
			exception_message+="\nEleven::"+e.getMessage();
			//System.out.println("Error1");
			//System.out.println(e);
		}
		
		//System.out.println("exception_message="+exception_message);
		//exception_message = "\nTestMessage";
		
/*		if(!exception_message.equalsIgnoreCase(""))
		{
			try {
				TransactionServer.excptionf.writeBytes(exception_message+" "+Response);
			} catch (IOException e) {			
				// TODO Auto-generated catch block
				e.printStackTrace();
			}//appends the string to the file
		}	*/	
	}
	
	//************ METHODS ******************//
	/************* METHOD BODY -WRITE PORT LOG  **************************/
	/*public static void write_port_log(String imei, String folderDate, String serverdatetime, String DateTime, int port_no)
	{	
		BufferedWriter out_a2 =null;
		Date date_last_loc1=null,date_last_loc2=null,date_servertime3=null;
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					
		boolean success1 = (new File(folderDate)).mkdir();		//MAKE FOLDER		
		
		String filename = folderDate+"/"+port_no+".txt";
						
		//String imei_string = "\n"+imei+" : "+serverdatetime;
		String imei_string = "\n"+imei;
		
		
		//#### READ EXISTING IMEI ENTRY IN FILE ###############/		
		boolean imei_exist = false;
		try{
			  // Open the file that is the first 
			  // command line parameter
			  FileInputStream fstream = new FileInputStream(filename);
			  // Get the object of DataInputStream
			  DataInputStream in = new DataInputStream(fstream);
			  BufferedReader br = new BufferedReader(new InputStreamReader(in));
			  String strLine;
			  //Read File Line By Line
			  while ((strLine = br.readLine()) != null)   {
			  // Print the content on the console
				  if(imei.equalsIgnoreCase(strLine.trim()))
				  {
					  imei_exist = true;
					  break;
					  //System.out.println (strLine);
				  }
			  }
			  //Close the input stream
			  in.close();
		    }catch (Exception e){//Catch exception if any
		  //System.err.println("imei read error: " + e.getMessage());
		  }		
		//#####################################################/
		
		try{
			if(!imei_exist)		//IF DOES NOT EXIST
			{
				//System.out.println("PORT LOG FILE DOES NOT EXIST");
				out_a2 = new BufferedWriter(new FileWriter(filename, true));																											
				out_a2.write(imei_string);
				out_a2.close();
			}
		} catch(Exception e) {System.out.println("EXCEPTION IN WRITING LOG FILE:"+e.getMessage());}																									
	}	
	//METHOD FOR GETTING CURRENT DATETIME

	//************* GET XML ATTRIBUTES FROM LINE STRING ************/
	public static String getXmlAttribute(String line, String param)
	{
		//System.out.println("In getXmlAttrib: line="+line+" ,param="+param);
		String str1 ="";
		String value ="";
		String[] str2;
		
		try {
			Pattern p = Pattern.compile(param);
			Matcher matcher = p.matcher(line);				
			
			while(matcher.find()){
						
				str1 = matcher.group().toString().replace("\"","");
				str2 = str1.split("=");
				//System.out.println(str2[1]);
				value = str2[1];
				//System.out.println("val="+value);
				break;
			}
		} catch(Exception e) { System.out.println("Error in function-Xml Attribute"+e.getMessage());}
		
		return value;		
	}

	/************* METHOD BODY -WRITE LAST LOCATION  **************************/
	
	public void write_last_location(String MsgType, String imei, String Version, String Fix, String Latitude, String Longitude, String Speed, String serverdatetime, String DateTime, String io_value1, String io_value2, String io_value3, String io_value4, String io_value5, String io_value6, String io_value7, String io_value8, String Signal_Strength, String SupplyVoltage,String cellname) {
		
		//RandomAccessFile out_a2 =null;
		//************WRITE LAST LOCATION FILE **********************								
		//String filename = "/var/www/html/itrack_vts/xml_vts/last_location/"+vserial+".xml";		
		String line="", q="\"", cass_imei="", cass_date="", cass_last_halt_time="", cass_day_max_speed="", cass_day_max_speed_time="", cass_lat="", cass_lng="";
		String last_halt_time = "", day_max_speed="", day_max_speed_time="", cass_lat_s = "", cass_lng_s = "", Latitude_s="", Longitude_s="";
		float tmp_speed = 0.0f;
		long curr_device_millis = 0L, server_millis=0L, last_device_millis=0L;
		day_max_speed = Speed;
		day_max_speed_time = DateTime;	//DEFAULT ASSINGMENT
		
		Date date_last_loc1=null, date_last_loc2=null, date_servertime2=null, cass_date_obj=null;
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
						
		String tmpstr2="";
		//tmpstr2 = "/var/www/html/itrack_vts/xml_vts/last_location/"+vserial+".xml";
		//tmpstr2 = filename;	
		
		//ADD ONE HOUR TO SERVERTIME
		int minutesToAdd = 60;  // 1 hrs

		try{
		
		date_last_loc2 = (Date) sdf.parse(DateTime);			//PARSE DATE LAST LOCATION		
		curr_device_millis = date_last_loc2.getTime();
		//System.out.println("DMILLI="+device_millis);
			
		Calendar cal = Calendar.getInstance();
		cal.setTime(sdf.parse(serverdatetime));
		cal.add(Calendar.MINUTE, minutesToAdd);
		//System.out.println(cal.getTime());
			
		String TimeStop_Str = sdf.format(cal.getTime());
			//System.out.println(TimeStop_Str);
			date_servertime2 = (Date) sdf.parse(TimeStop_Str);		//PARSE SERVER DATETIME
			server_millis = date_servertime2.getTime();
		} catch(Exception e1){System.out.println("ErrorLastLocation1="+e1.getMessage());}
		
		
		//System.out.println("date_last_loc2="+date_last_loc2+" ,date_servertime2="+date_servertime2);
		
		//long FileLength=0;
		String strLine1="";
				 
		boolean record_exist = false;
		LastData lastData = null;
		
		//System.out.println("In LastTime="+imei);
		//### PULL check if record already exists 
	/*	TreeMap pMap = null;
		try{
			TransactionServer.data.setImei(imei);
			lastData = TransactionServer.dao.selectByImei(TransactionServer.data.getImei());
			pMap = new TreeMap();
			pMap = lastData.getPMap();

			cass_imei = lastData.getImei();
			cass_date = (String) pMap.get("h");
			cass_date_obj = (Date) sdf.parse(cass_date);
			last_device_millis = cass_date_obj.getTime();
			
			System.out.println("IMEI="+cass_imei);
			if(!cass_imei.equals("")) {
				record_exist = true;
			}
		}catch(Exception re){}*/
		
		 // if record_exist=false then go to this block 
		q = ";";
		 
		try {				
			//System.out.println("LastUpdateTime="+TransactionServer.last_update_time.get(imei));
			if( (!Latitude.equals("")) && (!Longitude.equals("")) && (!Latitude.equals("0.0")) && (!Longitude.equals("0.0")) ) 
			{
				if(TransactionServer.last_update_time.get(imei)==null) 
				{
					last_halt_time = DateTime;
		
					{
						TransactionServer.last_update_time.put(imei, curr_device_millis);
						TransactionServer.last_Latitude.put(imei, Latitude);
						TransactionServer.last_Longitude.put(imei, Longitude);
						TransactionServer.last_DayMaxSpd.put(imei,Speed);
						TransactionServer.last_DayMaxSpdTime.put(imei,DateTime);
						TransactionServer.last_HaltTime.put(imei,DateTime);
						
						//System.out.println("FirstTime Insert");
						line = MsgType+q+Version+q+Fix+q+Latitude+q+Longitude+q+Speed+q+DateTime+q+io_value1+q+io_value2+q+io_value3+q+io_value4+q+io_value5+q+io_value6+q+io_value7+q+io_value8+q+Signal_Strength+q+SupplyVoltage+q+day_max_speed+q+day_max_speed_time+q+last_halt_time+q+cellname+q;
						
						//String lastSeenData = "N;v1.45C;1;26.25858;79.82557;0.06;2015-01-22@00:00:09;2;5;3;5;6;6;3;5;0;12.88;21;13:09:10;20:20:20;abcd;1;0;0;1;0;0;1;0;0";
						TransactionServer.push_cassandra.insertLastdata(imei, line);
	
						TransactionServer.last_update_time.put(imei, System.currentTimeMillis());
						//CurrentFileWriteHandler.StrBuf.setLength(0);
						//System.out.println("LINE="+line);
						//out_a2.close();
					}
				}
				else if((System.currentTimeMillis() - TransactionServer.last_update_time.get(imei)) > 60) 
				{																										
					//System.out.println("Else Insert");
									
					cass_lat = TransactionServer.last_Latitude.get(imei);
					cass_lng = TransactionServer.last_Longitude.get(imei);
					//cass_date = TransactionServer.last_Longitude.get(imei);
					cass_day_max_speed = TransactionServer.last_DayMaxSpd.get(imei);
					cass_day_max_speed_time = TransactionServer.last_DayMaxSpdTime.get(imei);
					cass_last_halt_time = TransactionServer.last_HaltTime.get(imei);
										
					//System.out.println("CassLat="+cass_lat+" ,cass_lng="+cass_lng+" ,cass_date="+cass_date+" ,daymaxspd="+cass_day_max_speed+" ,ass_day_max_speed_time="+cass_day_max_speed_time+" ,cass_last_halt_time="+cass_last_halt_time);
																											
					//######LAST HALT TIME BLOCK
					Latitude_s = Latitude.substring(0, Latitude.length() - 1);
					Longitude_s = Longitude.substring(0, Longitude.length() - 1);
					
					cass_lat_s = cass_lat.substring(0, cass_lat.length() - 1);
					cass_lng_s = cass_lng.substring(0, cass_lng.length() - 1);									
					//System.out.println("One");													
					float distance1 = calculateDistance(Float.parseFloat(Latitude_s), Float.parseFloat(cass_lat_s), Float.parseFloat(Longitude_s), Float.parseFloat(cass_lng_s) );								
//					long time_diff = calculateTimeDiff(DateTime, cass_date);  //Seconds
//					time_diff = time_diff / 3600;
					//System.out.println("Two");	
					//$tmp_time_diff1 = (strtotime($datetime) - strtotime($last_time1)) / 3600;
//					if(time_diff>0) {
//						tmp_speed = distance1 / (float) time_diff;
//					}
					
					//System.out.println("tmp_speed="+tmp_speed+" ,distance="+distance1+" ,time_diff="+time_diff);
					if(tmp_speed>100.0 && distance1>0.1) {
	
					}
					else {
						//##### LAST HALT TIME
						if(Float.parseFloat(Speed) > 10.0)
						{
							last_halt_time = DateTime;
						}
						else
						{
							if(cass_last_halt_time.equals(""))
							{
								last_halt_time = DateTime;
							}
							else
							{
								last_halt_time = cass_last_halt_time;
							}
						}
						
						//###### DAY MAX SPEED AND TIME
						Float f1 = new Float(cass_day_max_speed);
						double d1 = f1.doubleValue();
						
						Float f2 = new Float(Speed);
						double d2 = f2.doubleValue();								
						
						//System.out.println("xml_day_max_speed="+xml_day_max_speed+", Speed="+Speed);
						//System.out.println("d1="+d1+", d2="+d2);
						
						if(d2 > d1) {
							//System.out.println("condition if");
							day_max_speed = Speed;
							day_max_speed_time = DateTime;
						}
						else {
							//System.out.println("condition else");
							day_max_speed = cass_day_max_speed;
							day_max_speed_time = cass_day_max_speed_time;
						}
						
						//## RESET SPEED IF DAY CHANGES
	/*					String[] daytmp1,day1,daytmp2,day2;								 
						String delimiter1 = " ",delimiter2="-";
						daytmp1 = cass_date.split(delimiter1);
						daytmp2 = DateTime.split(delimiter1);
						
						day1 = daytmp1[0].split(delimiter2);
						day2 = daytmp2[0].split(delimiter2);
						 
						//System.out.println("day1="+day1[2]+" ,day2="+day2[2]);
						if(!(day1[2].equals(day2[2]))) {
							//System.out.println("IN day1,day2");
							day_max_speed = "0.0";
							day_max_speed_time = DateTime;									
							//System.out.println("day1="+day1[2]+" ,day2="+day2[2]);
						}	*/							
					}
					/*try {							
						date_last_loc1 = (Date) sdf.parse(cass_date);		//XML DATETIME
							
					}
					catch(Exception e) {
						System.out.println(e.getMessage());
					}*/						
						
					//if(  (date_last_loc2.compareTo(date_last_loc1) > 0) && (date_last_loc2.compareTo(date_servertime2) < 0) && (date_last_loc2.compareTo(valid_date_min) > 0) && (date_last_loc2.compareTo(valid_date_max) < 0) ) 
					if((!Latitude.equals("")) && (!Longitude.equals("")) && (!Latitude.equals("0.0")) && (!Longitude.equals("0.0")) ) {																  
						line = MsgType+q+Version+q+Fix+q+Latitude+q+Longitude+q+Speed+q+DateTime+q+io_value1+q+io_value2+q+io_value3+q+io_value4+q+io_value5+q+io_value6+q+io_value7+q+io_value8+q+Signal_Strength+q+SupplyVoltage+q+day_max_speed+q+day_max_speed_time+q+last_halt_time+q+cellname+q;
						TransactionServer.push_cassandra.insertLastdata(imei, line);
						TransactionServer.last_update_time.put(imei, System.currentTimeMillis());		
						TransactionServer.last_Latitude.put(imei, Latitude);
						TransactionServer.last_Longitude.put(imei, Longitude);
						TransactionServer.last_DayMaxSpd.put(imei,day_max_speed);
						TransactionServer.last_DayMaxSpdTime.put(imei,day_max_speed_time);
						TransactionServer.last_HaltTime.put(imei,last_halt_time);
					}
				
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			/*try {
				out_a2.close();
			}
			catch (Exception e1) {
				
			}*/
		}
	}
	
	//###CHECK VALID IMEI	
	public static boolean check_valid_imei(String imei)
	{
		//System.out.println("IN CHECK VALID IMEI");
		boolean valid_imei = false;
		
		if(imei.length()==15)
		{
			try{
			valid_imei = true;
			//System.out.println("valid_imei: " + valid_imei);  
			}catch(Exception e) {System.out.println("ERROR-CORRUPTED IMEI:"+e.getMessage());}
		}		
		return valid_imei;		
	}
	
	/************ METHOD- CALCULATE DISTANCE **************/
	public static float calculateDistance(float lat1, float lat2, float lng1, float lng2) 
	{	    
		//System.out.println("In CACL DIST : lat1 : "+lat1+" lng1 : "+lng1+" lat2 : "+lat2 + " lng2 : "+lng2);
		double earthRadius = 3958.75;
		double dLat = Math.toRadians(lat2-lat1);
		double dLng = Math.toRadians(lng2-lng1);
		double a = Math.sin(dLat/2) * Math.sin(dLat/2) +
		Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
		Math.sin(dLng/2) * Math.sin(dLng/2);
		double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
		double dist = earthRadius * c;
		int meterConversion = 1609;
		return new Float(dist * meterConversion).floatValue();	//KM
    }
	
	/************* METHOD- CALCULATE TIME DIFFERENCE ************/
	public static long calculateTimeDiff(String time1, String time2)
	{
		//System.out.println("Time1="+time1+" ,Time2="+time2);
		//System.out.println();
		
		if(time1.equalsIgnoreCase(""))
		{
			return 600;
		}
		
		String[] temp,temp1,temp2;
		Calendar calendar1 = Calendar.getInstance();
		Calendar calendar2 = Calendar.getInstance();

		/*temp=split(time1," ");
		temp1=split(temp[0],"-");
		temp2=split(temp[1],":");*/
		
		temp= time1.split(" ");
		temp1=temp[0].split("-");
		temp2=temp[1].split(":");		
		calendar1.set(Integer.parseInt(temp1[0]), Integer.parseInt(temp1[1]), Integer.parseInt(temp1[2]) , Integer.parseInt(temp2[0]), Integer.parseInt(temp2[1]), Integer.parseInt(temp2[2]) );
		/*temp=split(time2," ");
		temp1=split(temp[0],"-");
		temp2=split(temp[1],":");*/
		
		temp=time2.split(" ");
		temp1=temp[0].split("-");
		temp2=temp[1].split(":");
		calendar2.set(Integer.parseInt(temp1[0]), Integer.parseInt(temp1[1]), Integer.parseInt(temp1[2]) , Integer.parseInt(temp2[0]), Integer.parseInt(temp2[1]), Integer.parseInt(temp2[2]) );

		long milliseconds1 = calendar1.getTimeInMillis();
		long milliseconds2 = calendar2.getTimeInMillis();
		long diff = milliseconds2 - milliseconds1;
		long diffMinutes = diff / (60 * 1000);

		//System.out.println("Time in minutes: " + diffMinutes + " minutes.");        		
		//"yyyy-MM-dd HH:mm:ss"
		long diffSeconds= diffMinutes * 60;  //IN SECONDS
		return diffSeconds;
	}
	
	//public List<FileWriteHandler> RFileHandler=new ArrayList<FileWriteHandler>();
	//public List<FileWriteHandler> RFileHandler2=new ArrayList<FileWriteHandler>();
}
